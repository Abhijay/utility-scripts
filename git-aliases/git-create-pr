#!/bin/sh

# ANSI color codes for styling the output
YELLOW='\033[0;33m' # Sets text to yellow
NC='\033[0m'        # Resets the text color to default, no color

# Function to handle script termination and cleanup
cleanup() {
  # Stop the spinning animation by killing its process
  kill $spin_pid 2>/dev/null
  wait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages

  # Finalizing output
  tput cnorm  # Show the cursor again
  echo  # Move the cursor to the next line
  exit 1
}

# Function to display a spinning animation during the LLM processing
spin_animation() {
  # Array of spinner characters for the animation
  spinner=("⠋" "⠙" "⠹" "⠸" "⠼" "⠴" "⠦" "⠧" "⠇" "⠏")
  # Infinite loop to keep the animation running
  while true; do
    for i in "${spinner[@]}"; do
      tput civis  # Hide the cursor to enhance the animation appearance
      tput el1    # Clear the line from the cursor to the beginning to display the spinner
      printf "\\r${YELLOW}%s${NC} Generating LLM PR report..." "$i"  # Print the spinner and message
      sleep 0.1   # Delay to control the speed of the animation
      tput cub 32 # Move the cursor back 32 columns to reset the spinner position
    done
  done
}

# Determine the default parent branch from `refs/remotes/origin/HEAD`
default_parent_branch=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')

# Parse command-line arguments
while [ "$#" -gt 0 ]; do
  case "$1" in
    -p|--parent)
      parent_branch="$2"
      shift 2
      ;;
    *)
      echo "Unknown option: $1"
      exit 1
      ;;
  esac
done

# Check if the `llm` command is installed
if ! command -v llm &> /dev/null; then
  echo "Error: 'llm' command is not installed. Please install it and try again."
  exit 1
fi

# Trap SIGINT (Ctrl+C) and call the cleanup function
trap cleanup INT

# Start the spinning animation in the background
spin_animation &
spin_pid=$!  # Capture the process ID of the spinning animation

# Use the specified parent branch or default to the one from `refs/remotes/origin/HEAD`
parent_branch=${parent_branch:-$default_parent_branch}

# Generate the diff output
diff_output=$(git diff "$parent_branch")

# Check if the diff output is empty
if [ -z "$diff_output" ]; then
  # Stop the spinning animation by killing its process
  kill $spin_pid
  wait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages

  # Finalizing output
  tput cnorm  # Show the cursor again
  echo  # Move the cursor to the next line

  echo "Error: No changes detected. Cannot generate a PR report."
  exit 1
fi

# Generate the PR report using the diff output
if ! pr_report=$(echo "$diff_output" | llm -s "$(cat ../prompts/pr-system-prompt.txt)" 2>&1); then
  # Stop the spinning animation by killing its process
  kill $spin_pid
  wait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages

  # Finalizing output
  tput cnorm  # Show the cursor again
  printf "\\n"  # Move the cursor to the next line

  echo "Error: 'llm' command failed to generate the PR report:"
  echo "$pr_report"
  exit 1
fi

# Stop the spinning animation by killing its process
kill $spin_pid
wait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages

# Finalizing output
tput cnorm  # Show the cursor again
echo  # Move the cursor to the next line

# Display the generated PR report
echo "=== Generated PR Report ==="
echo "$pr_report"
echo "==========================="

# Create the PR using `gh pr create` with the generated report
gh pr create --body "$pr_report"
