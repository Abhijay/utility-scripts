#!/bin/sh

# ANSI color codes for styling the output
YELLOW='\033[0;33m' # Sets text to yellow
NC='\033[0m'        # Resets the text color to default, no color

# Function to handle script termination and cleanup
cleanup() {
  # Stop the spinning animation by killing its process
  kill $spin_pid 2>/dev/null
  wait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages
  tput cnorm  # Show the cursor again
  echo  # Move the cursor to the next line
  exit 1
}

# Function to display a spinning animation during the LLM processing
spin_animation() {
  # Array of spinner characters for the animation
  spinner=("⠋" "⠙" "⠹" "⠸" "⠼" "⠴" "⠦" "⠧" "⠇" "⠏")
  # Infinite loop to keep the animation running
  while true; do
    for i in "${spinner[@]}"; do
      tput civis  # Hide the cursor to enhance the animation appearance
      tput el1    # Clear the line from the cursor to the beginning to display the spinner
      printf "\\r${YELLOW}%s${NC} Generating LLM PR report..." "$i"  # Print the spinner and message
      sleep 0.1   # Delay to control the speed of the animation
      tput cub 32 # Move the cursor back 32 columns to reset the spinner position
    done
  done
}

# Determine the default parent branch from `refs/remotes/origin/HEAD`
default_parent_branch=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')

# Parse command-line arguments
while [ "$#" -gt 0 ]; do
  case "$1" in
    -p|--parent)
      parent_branch="$2"
      shift 2
      ;;
    *)
      echo "Unknown option: $1"
      exit 1
      ;;
  esac
done

# Check if the `llm` command is installed
if ! command -v llm &> /dev/null; then
  echo "Error: 'llm' command is not installed. Please install it and try again."
  exit 1
fi

# Trap SIGINT (Ctrl+C) and call the cleanup function
trap cleanup INT

# Start the spinning animation in the background
spin_animation &
spin_pid=$!  # Capture the process ID of the spinning animation

# Use the specified parent branch or default to the one from `refs/remotes/origin/HEAD`
parent_branch=${parent_branch:-$default_parent_branch}

# Generate the diff output
diff_output=$(git diff "$parent_branch")

# Check if the diff output is empty
if [ -z "$diff_output" ]; then
  cleanup
  echo "Error: No changes detected. Cannot generate a PR report."
  exit 1
fi

# Generate the PR report using the diff output
if ! pr_report=$(echo "$diff_output" | llm -s "$(cat ~/.config/prompts/pr-system-prompt.txt)" 2>&1); then
  cleanup
  echo "Error: 'llm' command failed to generate the PR report:"
  echo "$pr_report"
  exit 1
fi

# Stop the spinning animation by killing its process
kill $spin_pid
wait $spin_pid 2>/dev/null  # Wait for the process to terminate and suppress error messages

# Finalizing output
tput cnorm  # Show the cursor again
echo  # Move the cursor to the next line
# Check if the branch name contains a JIRA ticket pattern
current_branch=$(git branch --show-current)
jira_ticket=$(echo "$current_branch" | grep -oE '^[A-Z]+-[0-9]+$')

# If no JIRA ticket in branch name, prompt for optional JIRA link
if [ -z "$jira_ticket" ]; then
  echo "Please enter the JIRA ticket link if applicable, or press Enter to skip."
  read -p "JIRA ticket link (or press Enter to skip): " jira_link

  if [ -n "$jira_link" ]; then
    jira_ticket=$(echo "$jira_link" | grep -oE '[A-Z]+-[0-9]+')
  fi
fi

# Generate PR title using LLM with optional JIRA ticket
llm_input=""
if [ -n "$jira_ticket" ]; then
  llm_input="JIRA Ticket: $jira_ticket\n$pr_report"
else
  llm_input="$pr_report"
fi

# Generate the PR title using the LLM based on the PR report
if ! pr_title=$(echo "$llm_input" | llm -s "$(cat ~/.config/prompts/pr-title-prompt.txt)" 2>&1); then
  echo "Error: 'llm' command failed to generate the PR title:"
  echo "$pr_title"
  exit 1
fi

# Clean up the PR title by removing unnecessary asterisks
pr_title=$(echo "$pr_title" | sed 's/\*//g' | sed '/^[[:space:]]*$/d')

echo "=== Generated PR Title ==="
echo "$pr_title"
echo "=========================="

# Append JIRA link to PR body if available
if [ -n "$jira_link" ]; then
  pr_report="JIRA Issue: $jira_link\n\n$pr_report"
fi

echo "=== Generated PR Report ==="
echo "$pr_report"
echo "==========================="

# Create the PR using GitHub CLI with the generated title and report
gh pr create --title "$pr_title" --body "$(echo -e "$pr_report")"
