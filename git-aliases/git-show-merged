#!/usr/bin/env bash

# Ensure script exits on error
set -euo pipefail

# Default behavior: only list merged branches
CLEAN=false

# Parse options
while getopts ":c" opt; do
  case "${opt}" in
    c)
      CLEAN=true
      ;;
    \?)
      echo "Usage: $0 [-c]" >&2
      exit 1
      ;;
  esac
done

# Ensure GitHub CLI is installed
if ! command -v gh &>/dev/null; then
  echo "Error: GitHub CLI (gh) is not installed. Install it from https://cli.github.com/" >&2
  exit 1
fi

# Fetch latest remote branches
git fetch --prune origin

# Get all remote branches (excluding HEAD reference)
branches=$(git branch -r | sed 's/origin\///' | grep -v "HEAD")

echo "Checking for branches with merged PRs that haven't been deleted..."
echo ""

# Loop through each branch and check PR status
for branch in $branches; do
  # Get PR state (if it exists)
  pr_status=$(gh pr list --state merged --head "$branch" --json state --jq '.[].state' 2>/dev/null || echo "")

  # If a PR exists and is merged but the branch still exists in remote
  if [[ "$pr_status" == "MERGED" ]]; then
    if [ "$CLEAN" = true ]; then
      echo "Deleting merged branch: $branch"
      git push origin --delete "$branch" --no-verify
    else
      echo "Branch '$branch' has a merged PR but hasn't been deleted."
    fi
  fi
done

echo ""
echo "Done."
